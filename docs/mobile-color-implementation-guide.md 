# Mobile Color Implementation Guide

## 📱 CloudScribble Mobile App Colors

This guide shows you how to implement CloudScribble's brand colors in your iOS and Android native apps.

## 🍎 iOS Implementation

### File Structure
```
ios/
├── CloudScribble/
│   ├── Colors.swift          ← Your color definitions
│   ├── Assets.xcassets/
│   │   ├── AppIcon.appiconset/
│   │   │   ├── Full_Icon_no_background.png
│   │   │   └── icon1.png
│   │   └── Colors/           ← Optional: Asset Catalog colors
│   └── Info.plist
```

### Usage Examples

#### Basic Color Usage
```swift
// Set background color
view.backgroundColor = .creamAlt

// Set text color
label.textColor = .navy

// Set button background
button.backgroundColor = .mauve
```

#### Button State Management
```swift
// Configure button for different states
button.setBackgroundColor(.primaryButton(for: .normal), for: .normal)
button.setBackgroundColor(.primaryButton(for: .highlighted), for: .highlighted)
button.setBackgroundColor(.primaryButton(for: .disabled), for: .disabled)
```

#### Navigation Bar Styling
```swift
// Configure navigation bar with brand colors
navigationController?.navigationBar.backgroundColor = .creamAlt
navigationController?.navigationBar.tintColor = .navy
navigationController?.navigationBar.titleTextAttributes = [
    .foregroundColor: UIColor.navy
]
```

#### Dark Mode Support
```swift
// Use adaptive colors for dark mode support
view.backgroundColor = .adaptiveBackground
label.textColor = .adaptiveText
```

#### Status Colors
```swift
// Success state
successLabel.textColor = .success
successView.backgroundColor = .sage

// Error state
errorLabel.textColor = .error
errorView.backgroundColor = .dustyRose

// Warning state
warningButton.backgroundColor = .warning
```

### Custom UI Components

#### Branded Button Class
```swift
class CloudScribbleButton: UIButton {
    
    enum ButtonType {
        case primary, secondary, success, premium
    }
    
    var buttonType: ButtonType = .primary {
        didSet {
            updateAppearance()
        }
    }
    
    override func awakeFromNib() {
        super.awakeFromNib()
        updateAppearance()
    }
    
    private func updateAppearance() {
        layer.cornerRadius = 8
        
        switch buttonType {
        case .primary:
            backgroundColor = .lightPurple
            setTitleColor(.cream, for: .normal)
        case .secondary:
            backgroundColor = .mauve
            setTitleColor(.navy, for: .normal)
        case .success:
            backgroundColor = .sage
            setTitleColor(.cream, for: .normal)
        case .premium:
            backgroundColor = .gold
            setTitleColor(.navy, for: .normal)
        }
    }
}
```

## 🤖 Android Implementation

### File Structure
```
android/app/src/main/
├── res/
│   ├── values/
│   │   ├── colors.xml        ← Your color definitions
│   │   ├── themes.xml        ← Material Design themes
│   │   └── styles.xml        ← Custom styles
│   ├── mipmap-*/
│   │   ├── ic_launcher.png   ← Full_Icon_no_background.png
│   │   └── ic_launcher_round.png
│   └── drawable/
│       └── logo.png          ← icon1.png
└── java/com/cloudscribble/
    └── CloudScribbleColors.kt ← Programmatic color access
```

### Usage Examples

#### Basic Color Usage (XML)
```xml
<!-- In layout files -->
<TextView
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="Welcome to CloudScribble"
    android:textColor="@color/navy"
    android:background="@color/cream_alt" />

<Button
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="Get Started"
    android:backgroundTint="@color/button_primary"
    android:textColor="@color/text_on_primary" />
```

#### Programmatic Color Usage (Kotlin)
```kotlin
// Basic color setting
textView.setTextColor(CloudScribbleColors.Primary.navy(this))
button.setBackgroundColor(CloudScribbleColors.Button.primary(this))

// Status colors
when (status) {
    Status.SUCCESS -> {
        statusIcon.setColorFilter(CloudScribbleColors.Status.success(this))
        statusText.setTextColor(CloudScribbleColors.Status.success(this))
    }
    Status.ERROR -> {
        statusIcon.setColorFilter(CloudScribbleColors.Status.error(this))
        statusText.setTextColor(CloudScribbleColors.Status.error(this))
    }
}
```

#### Material Design Theme Integration
```xml
<!-- themes.xml -->
<resources>
    <style name="CloudScribbleTheme" parent="Theme.Material3.DayNight">
        <item name="colorPrimary">@color/navy</item>
        <item name="colorOnPrimary">@color/cream</item>
        <item name="colorSecondary">@color/mauve</item>
        <item name="colorOnSecondary">@color/navy</item>
        <item name="android:colorBackground">@color/cream_alt</item>
        <item name="colorSurface">@color/brand_background</item>
        <item name="colorError">@color/dusty_rose</item>
    </style>
</resources>
```

#### Custom Button Styles
```xml
<!-- styles.xml -->
<resources>
    <style name="CloudScribble.Button.Primary" parent="Widget.Material3.Button">
        <item name="backgroundTint">@color/button_primary</item>
        <item name="android:textColor">@color/text_on_primary</item>
        <item name="cornerRadius">8dp</item>
    </style>
    
    <style name="CloudScribble.Button.Secondary" parent="Widget.Material3.Button.OutlinedButton">
        <item name="strokeColor">@color/button_secondary</item>
        <item name="android:textColor">@color/button_secondary</item>
        <item name="cornerRadius">8dp</item>
    </style>
</resources>
```

### Custom Components (Kotlin)

#### Branded Button Class
```kotlin
class CloudScribbleButton @JvmOverloads constructor(
    context: Context,
    attrs: AttributeSet? = null,
    defStyleAttr: Int = 0
) : MaterialButton(context, attrs, defStyleAttr) {
    
    enum class ButtonType {
        PRIMARY, SECONDARY, SUCCESS, PREMIUM
    }
    
    var buttonType: ButtonType = ButtonType.PRIMARY
        set(value) {
            field = value
            updateAppearance()
        }
    
    init {
        updateAppearance()
    }
    
    private fun updateAppearance() {
        when (buttonType) {
            ButtonType.PRIMARY -> {
                setBackgroundColor(CloudScribbleColors.Button.primary(context))
                setTextColor(CloudScribbleColors.Text.onPrimary(context))
            }
            ButtonType.SECONDARY -> {
                setBackgroundColor(CloudScribbleColors.Button.secondary(context))
                setTextColor(CloudScribbleColors.Text.onSecondary(context))
            }
            ButtonType.SUCCESS -> {
                setBackgroundColor(CloudScribbleColors.Button.success(context))
                setTextColor(CloudScribbleColors.Text.onPrimary(context))
            }
            ButtonType.PREMIUM -> {
                setBackgroundColor(CloudScribbleColors.Button.premium(context))
                setTextColor(CloudScribbleColors.Text.onSecondary(context))
            }
        }
    }
}
```

## 🎨 Design System Integration

### Color Usage Guidelines

#### Navigation
- **Background**: `cream_alt` (#FCF8F1)
- **Primary Elements**: `navy` (#283593)
- **Active States**: `mauve` (#B995A9)

#### Buttons
- **Primary Actions**: `light_purple` (#6774c8)
- **Secondary Actions**: `mauve` (#B995A9)  
- **Success Actions**: `sage` (#9CAF88)
- **Premium Features**: `gold` (#C8A943)

#### Status Indicators
- **Success**: `sage` (#9CAF88)
- **Warning**: `gold` (#C8A943)
- **Info**: `light_blue` (#78CBF9)
- **Error**: `dusty_rose` (#E8B4BC)

#### Text Hierarchy
- **Primary Text**: `navy` (#283593)
- **Secondary Text**: `warm_gray` (#4A4B4F)
- **Text on Dark**: `cream` (#FDF8F0)

### Accessibility Considerations

#### Contrast Ratios
- **Navy on Cream**: ✅ AAA compliant (high contrast)
- **Warm Gray on Cream**: ✅ AA compliant
- **Gold on Navy**: ✅ AA compliant
- **White on Navy**: ✅ AAA compliant

#### Color Blind Accessibility
- Use **Navy** and **Gold** for critical distinctions
- Avoid relying solely on **Mauve/Dusty Rose** differences
- Include icons or text labels for status indicators

## 🚀 Quick Implementation Checklist

### iOS Setup
- [ ] Add `Colors.swift` to your Xcode project
- [ ] Import colors in your view controllers
- [ ] Configure navigation bar colors
- [ ] Set up custom button classes
- [ ] Test dark mode compatibility

### Android Setup  
- [ ] Add `colors.xml` to `res/values/`
- [ ] Add `CloudScribbleColors.kt` to your package
- [ ] Update `themes.xml` with brand colors
- [ ] Create custom button styles
- [ ] Test Material Design integration

### Both Platforms
- [ ] Place app icons in appropriate directories
- [ ] Test color accessibility compliance
- [ ] Implement status color system
- [ ] Create branded component library
- [ ] Document color usage for your team

## 📱 Icon Integration

### iOS App Icons Required Sizes
- **20x20pt** (40x40px, 60x60px)
- **29x29pt** (58x58px, 87x87px)  
- **40x40pt** (80x80px, 120x120px)
- **60x60pt** (120x120px, 180x180px)

### Android App Icons Required Sizes
- **48x48dp** (mdpi: 48px, hdpi: 72px, xhdpi: 96px, xxhdpi: 144px, xxxhdpi: 192px)

### Implementation
1. Use `Full_Icon_no_background.png` for app launcher icons
2. Use `icon1.png` for in-app branding and splash screens
3. Ensure transparent backgrounds for proper system integration

---

**Ready to implement?** Start with the color files above, then gradually build your custom component library using CloudScribble's brand colors!